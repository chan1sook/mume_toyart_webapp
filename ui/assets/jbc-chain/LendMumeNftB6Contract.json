{
  "address": "0x9215dEdA97D5dEaaec00F8bBf2Ee7d6829C05017",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mumeNftContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_muTokenContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimMuReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "currentSessionLendTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "currentSessionMuReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "grantAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "lendNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lendStartAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "muToClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "muTokenContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mumeNftContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftOldOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "renewLendSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "revokeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardMuPerDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "muPerDay",
          "type": "uint256"
        }
      ],
      "name": "setLendRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x09ce31be909f47023c56c0c97d3d0584f05823cca7fe97c96dd4d947bf7c9243",
  "receipt": {
    "to": null,
    "from": "0xC70Edf3aB36E0D57eFD8f412A3460D225931A110",
    "contractAddress": "0x9215dEdA97D5dEaaec00F8bBf2Ee7d6829C05017",
    "transactionIndex": 2,
    "gasUsed": "1086360",
    "logsBloom": "0x
    "blockHash": "0xe53e955a78dd38f18d0ada94a20c3c09e580e86e77a03296a8fa78742b1a05e9",
    "transactionHash": "0x09ce31be909f47023c56c0c97d3d0584f05823cca7fe97c96dd4d947bf7c9243",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 2557517,
        "transactionHash": "0x09ce31be909f47023c56c0c97d3d0584f05823cca7fe97c96dd4d947bf7c9243",
        "address": "0x9215dEdA97D5dEaaec00F8bBf2Ee7d6829C05017",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x000000000000000000000000c70edf3ab36e0d57efd8f412a3460d225931a110",
          "0x000000000000000000000000c70edf3ab36e0d57efd8f412a3460d225931a110"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe53e955a78dd38f18d0ada94a20c3c09e580e86e77a03296a8fa78742b1a05e9"
      }
    ],
    "blockNumber": 2557517,
    "cumulativeGasUsed": "1128360",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC70Edf3aB36E0D57eFD8f412A3460D225931A110",
    "0xf5B8EeAd06e494384eD70B9ea6A191c874841fb8",
    "0x412534E7bBB3FC55833c6d32adc6b4450883F2bc"
  ],
  "numDeployments": 1,
  "solcInputHash": "3ca80e2079172a77adace0a7d2030c61",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mumeNftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_muTokenContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimMuReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"currentSessionLendTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"currentSessionMuReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"grantAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"lendNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lendStartAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"muToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"muTokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mumeNftContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftOldOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"renewLendSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"revokeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardMuPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"muPerDay\",\"type\":\"uint256\"}],\"name\":\"setLendRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LendMumeNft.sol\":\"LendMumeNftContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/LendMumeNft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\n\\r\\ninterface IMumeNft {\\r\\n    function ownerOf(uint256 tokenId) external view returns (address);\\r\\n    function priceOf(uint256 tokenId) external view returns (uint256);\\r\\n    function isTradeable(uint256 tokenId) external view returns (bool);\\r\\n    function setTradeable(uint256 tokenId, bool state) external;\\r\\n    function setSellable(uint256 tokenId, bool state) external;\\r\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\r\\n}\\r\\n\\r\\ninterface IMuToken {\\r\\n    function mint(address to, uint256 amount) external;\\r\\n}\\r\\n\\r\\n// Lend Mume Nft\\r\\n// Grant MuToken AdminRole to this contract address before used\\r\\ncontract LendMumeNftContract is AccessControl {\\r\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\r\\n    address public contractDeployer;\\r\\n    \\r\\n    address public mumeNftContract;\\r\\n    address public muTokenContract;\\r\\n\\r\\n    mapping(uint256 => address) public nftOldOwner;\\r\\n    mapping(uint256 => uint256) public lendStartAt;\\r\\n\\r\\n    mapping(uint256 => uint256) public muToClaim;\\r\\n    \\r\\n    uint256 public rewardMuPerDay = 0.01 ether;\\r\\n\\r\\n    constructor(address initialAdmin, address _mumeNftContract, address _muTokenContract) {\\r\\n        contractDeployer = msg.sender;\\r\\n        mumeNftContract = _mumeNftContract;\\r\\n        muTokenContract = _muTokenContract;\\r\\n\\r\\n        // Owner Deployer Always Grant ADMIN_ROLE\\r\\n        _grantRole(ADMIN_ROLE, initialAdmin);\\r\\n    }\\r\\n\\r\\n    // Grant ADMIN_ROLE to address \\\"to\\\"\\r\\n    // ADMIN_ROLE only\\r\\n    function grantAdmin(address to) external onlyRole(ADMIN_ROLE) {\\r\\n        require(to != msg.sender, \\\"Can't grant self\\\");\\r\\n        _grantRole(ADMIN_ROLE, to);\\r\\n    }\\r\\n    \\r\\n    // Revoke ADMIN_ROLE from address \\\"to\\\"\\r\\n    // ADMIN_ROLE only\\r\\n    function revokeAdmin(address to) external onlyRole(ADMIN_ROLE) {\\r\\n        require(to != msg.sender, \\\"Can't revoke self\\\");\\r\\n        _revokeRole(ADMIN_ROLE, to);\\r\\n    }\\r\\n\\r\\n    // Set lend reward rate per day\\r\\n    // ADMIN_ROLE only\\r\\n    function setLendRewards(uint256 muPerDay) external onlyRole(ADMIN_ROLE) {\\r\\n        rewardMuPerDay = muPerDay;\\r\\n    }\\r\\n\\r\\n    // Start lend nft\\r\\n    // required tradeable and MumeNft.approve(contractAddress) to start lend program\\r\\n    function lendNft(uint256 tokenId) external {\\r\\n        IMumeNft nftContract = IMumeNft(mumeNftContract);\\r\\n        address owner = nftContract.ownerOf(tokenId);\\r\\n        require(owner == msg.sender, \\\"Not your NFT\\\");\\r\\n        require(nftContract.isTradeable(tokenId), \\\"This NFT isn't tradeable\\\");\\r\\n\\r\\n        // transfer to this contract\\r\\n        nftContract.transferFrom(msg.sender, address(this), tokenId);\\r\\n        // Lock nft to not sellable\\r\\n        nftContract.setSellable(tokenId, false);\\r\\n\\r\\n        // Set lend Data\\r\\n        nftOldOwner[tokenId] = msg.sender;\\r\\n        lendStartAt[tokenId] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    // Get Current Session Lend Time\\r\\n    // nftOwner Only\\r\\n    function currentSessionLendTime(uint256 tokenId) external view returns (uint256) {\\r\\n        require(nftOldOwner[tokenId] != address(0), \\\"NFT is not lending\\\");\\r\\n        require(nftOldOwner[tokenId] == msg.sender, \\\"Not your NFT\\\");\\r\\n        return _currentSessionLendTime(tokenId);\\r\\n    }\\r\\n\\r\\n    // Internal function for calculate current session lend time\\r\\n    function _currentSessionLendTime(uint256 tokenId) internal view returns (uint256) {\\r\\n        if(block.timestamp < lendStartAt[tokenId]) {\\r\\n            return 0;\\r\\n        }\\r\\n        return block.timestamp - lendStartAt[tokenId];\\r\\n    }\\r\\n\\r\\n    // Get Current Session MU Reward from Lend\\r\\n    // nftOwner Only\\r\\n    function currentSessionMuReward(uint256 tokenId) external view returns (uint256) {\\r\\n        require(nftOldOwner[tokenId] != address(0), \\\"NFT is not lending\\\");\\r\\n        require(nftOldOwner[tokenId] == msg.sender, \\\"Not your NFT\\\");\\r\\n        return _currentSessionMuReward(tokenId);\\r\\n    }\\r\\n\\r\\n    // Internal function for calculate MU Reward\\r\\n    // wei unit\\r\\n    function _currentSessionMuReward(uint256 tokenId) internal view returns (uint256) {\\r\\n        return _currentSessionLendTime(tokenId) * rewardMuPerDay / 1 days;\\r\\n    }\\r\\n\\r\\n    // Renew Lend NFT Session\\r\\n    // Use for get partial reward\\r\\n    function renewLendSession(uint256 tokenId) external {\\r\\n        require(nftOldOwner[tokenId] != address(0), \\\"NFT is not lending\\\");\\r\\n        require(nftOldOwner[tokenId] == msg.sender, \\\"Not your NFT\\\");\\r\\n\\r\\n        uint256 muReward = _currentSessionMuReward(tokenId);\\r\\n\\r\\n        muToClaim[tokenId] += muReward;\\r\\n\\r\\n        // Reset lend time\\r\\n        lendStartAt[tokenId] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    // Claim NFT and Store reward\\r\\n    function claimNft(uint256 tokenId) external {\\r\\n        require(nftOldOwner[tokenId] != address(0), \\\"NFT is not lending\\\");\\r\\n        require(nftOldOwner[tokenId] == msg.sender, \\\"Not your NFT\\\");\\r\\n\\r\\n        uint256 muReward = _currentSessionMuReward(tokenId);\\r\\n\\r\\n        muToClaim[tokenId] += muReward;\\r\\n\\r\\n        IMumeNft nftContract = IMumeNft(mumeNftContract);\\r\\n\\r\\n        // Trade NFT Back\\r\\n        nftContract.setTradeable(tokenId, true);\\r\\n        nftContract.transferFrom(address(this), msg.sender, tokenId);\\r\\n\\r\\n        // Reset Variable\\r\\n        nftOldOwner[tokenId] = address(0);\\r\\n        lendStartAt[tokenId] = 0;\\r\\n    }\\r\\n\\r\\n    // Claim MU Reward\\r\\n    function claimMuReward(uint256 tokenId, uint256 amount) external {\\r\\n        IMumeNft nftContract = IMumeNft(mumeNftContract);\\r\\n        require(nftOldOwner[tokenId] == msg.sender || nftContract.ownerOf(tokenId) == msg.sender, \\\"Not your NFT\\\");\\r\\n        require(muToClaim[tokenId] >= amount, \\\"Not sufficient reward\\\");\\r\\n\\r\\n        IMuToken muContract = IMuToken(muTokenContract);\\r\\n        muContract.mint(msg.sender, amount);\\r\\n        muToClaim[tokenId] -= amount;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xb289c9fbebc17b4ea8efb28a6ec514c20d942bb6730e80917bcaf0fadd4e2eaa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052662386f26fc100006007553480156200001c57600080fd5b5060405162001253380380620012538339810160408190526200003f916200017b565b60018054336001600160a01b0319918216179091556002805482166001600160a01b038581169190911790915560038054909216908316179055620000a57fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177584620000af565b50505050620001c5565b6000828152602081815260408083206001600160a01b038516845290915281205460ff1662000154576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556200010b3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600162000158565b5060005b92915050565b80516001600160a01b03811681146200017657600080fd5b919050565b6000806000606084860312156200019157600080fd5b6200019c846200015e565b9250620001ac602085016200015e565b9150620001bc604085016200015e565b90509250925092565b61107e80620001d56000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80635b3851cc116100c3578063a87e58b31161007c578063a87e58b314610327578063ca096fbb1461033a578063ca4a51821461034d578063d547741f14610356578063e64fef9214610369578063f49919531461037c57600080fd5b80635b3851cc146102be578063628570d0146102d157806375b238fc146102e457806391d14854146102f9578063a217fddf1461030c578063a24bfc6e1461031457600080fd5b80632f2ff15d116101155780632f2ff15d1461021157806332eb06e01461022457806335bb3e161461026557806336568abe1461027857806338a4676d1461028b57806345079f4f146102ab57600080fd5b806301ffc9a71461015d5780630c671a21146101855780631c45b65a1461019a578063248a9ca3146101c85780632d345670146101eb5780632ec09d39146101fe575b600080fd5b61017061016b366004610e54565b61038f565b60405190151581526020015b60405180910390f35b610198610193366004610e85565b6103c6565b005b6101ba6101a8366004610ea7565b60066020526000908152604090205481565b60405190815260200161017c565b6101ba6101d6366004610ea7565b60009081526020819052604090206001015490565b6101986101f9366004610ed5565b61056f565b61019861020c366004610ea7565b6105f0565b61019861021f366004610ef2565b61078a565b61024d610232366004610ea7565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161017c565b610198610273366004610ed5565b6107b5565b610198610286366004610ef2565b610830565b6101ba610299366004610ea7565b60056020526000908152604090205481565b6101986102b9366004610ea7565b610863565b6101ba6102cc366004610ea7565b610aab565b6101986102df366004610ea7565b610b1e565b6101ba60008051602061102983398151915281565b610170610307366004610ef2565b610bd1565b6101ba600081565b60015461024d906001600160a01b031681565b60035461024d906001600160a01b031681565b610198610348366004610ea7565b610bfa565b6101ba60075481565b610198610364366004610ef2565b610c18565b6101ba610377366004610ea7565b610c3d565b60025461024d906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806103c057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6002546000838152600460205260409020546001600160a01b03918216911633148061046357506040516331a9108f60e11b81526004810184905233906001600160a01b03831690636352211e90602401602060405180830381865afa158015610434573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104589190610f22565b6001600160a01b0316145b6104885760405162461bcd60e51b815260040161047f90610f3f565b60405180910390fd5b6000838152600660205260409020548211156104de5760405162461bcd60e51b8152602060048201526015602482015274139bdd081cdd59999a58da595b9d081c995dd85c99605a1b604482015260640161047f565b6003546040516340c10f1960e01b8152336004820152602481018490526001600160a01b039091169081906340c10f1990604401600060405180830381600087803b15801561052c57600080fd5b505af1158015610540573d6000803e3d6000fd5b50505060008581526006602052604081208054869350909190610564908490610f7b565b909155505050505050565b60008051602061102983398151915261058781610cb0565b336001600160a01b038316036105d35760405162461bcd60e51b815260206004820152601160248201527021b0b713ba103932bb37b5b29039b2b63360791b604482015260640161047f565b6105eb60008051602061102983398151915283610cbd565b505050565b6000818152600460205260409020546001600160a01b03166106245760405162461bcd60e51b815260040161047f90610f8e565b6000818152600460205260409020546001600160a01b0316331461065a5760405162461bcd60e51b815260040161047f90610f3f565b600061066582610d30565b90508060066000848152602001908152602001600020600082825461068a9190610fba565b90915550506002546040516311b1004f60e11b815260048101849052600160248201526001600160a01b03909116908190632362009e90604401600060405180830381600087803b1580156106de57600080fd5b505af11580156106f2573d6000803e3d6000fd5b50506040516323b872dd60e01b8152306004820152336024820152604481018690526001600160a01b03841692506323b872dd9150606401600060405180830381600087803b15801561074457600080fd5b505af1158015610758573d6000803e3d6000fd5b5050506000938452505060046020908152604080842080546001600160a01b0319169055600590915282209190915550565b6000828152602081905260409020600101546107a581610cb0565b6107af8383610d56565b50505050565b6000805160206110298339815191526107cd81610cb0565b336001600160a01b038316036108185760405162461bcd60e51b815260206004820152601060248201526f21b0b713ba1033b930b73a1039b2b63360811b604482015260640161047f565b6105eb60008051602061102983398151915283610d56565b6001600160a01b03811633146108595760405163334bd91960e11b815260040160405180910390fd5b6105eb8282610cbd565b6002546040516331a9108f60e11b8152600481018390526001600160a01b03909116906000908290636352211e90602401602060405180830381865afa1580156108b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d59190610f22565b90506001600160a01b03811633146108ff5760405162461bcd60e51b815260040161047f90610f3f565b60405163d8ef2b4760e01b8152600481018490526001600160a01b0383169063d8ef2b4790602401602060405180830381865afa158015610944573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109689190610fcd565b6109b45760405162461bcd60e51b815260206004820152601860248201527f54686973204e46542069736e277420747261646561626c650000000000000000604482015260640161047f565b6040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b038316906323b872dd90606401600060405180830381600087803b158015610a0257600080fd5b505af1158015610a16573d6000803e3d6000fd5b505060405163395b895360e21b815260048101869052600060248201526001600160a01b038516925063e56e254c9150604401600060405180830381600087803b158015610a6357600080fd5b505af1158015610a77573d6000803e3d6000fd5b5050506000938452505060046020908152604080842080546001600160a01b03191633179055600590915290912042905550565b6000818152600460205260408120546001600160a01b0316610adf5760405162461bcd60e51b815260040161047f90610f8e565b6000828152600460205260409020546001600160a01b03163314610b155760405162461bcd60e51b815260040161047f90610f3f565b6103c082610d30565b6000818152600460205260409020546001600160a01b0316610b525760405162461bcd60e51b815260040161047f90610f8e565b6000818152600460205260409020546001600160a01b03163314610b885760405162461bcd60e51b815260040161047f90610f3f565b6000610b9382610d30565b905080600660008481526020019081526020016000206000828254610bb89190610fba565b9091555050506000908152600560205260409020429055565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020611029833981519152610c1281610cb0565b50600755565b600082815260208190526040902060010154610c3381610cb0565b6107af8383610cbd565b6000818152600460205260408120546001600160a01b0316610c715760405162461bcd60e51b815260040161047f90610f8e565b6000828152600460205260409020546001600160a01b03163314610ca75760405162461bcd60e51b815260040161047f90610f3f565b6103c082610de0565b610cba8133610e17565b50565b6000610cc98383610bd1565b15610d28576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016103c0565b5060006103c0565b600062015180600754610d4284610de0565b610d4c9190610fef565b6103c09190611006565b6000610d628383610bd1565b610d28576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055610d983390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016103c0565b600081815260056020526040812054421015610dfe57506000919050565b6000828152600560205260409020546103c09042610f7b565b610e218282610bd1565b610e505760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161047f565b5050565b600060208284031215610e6657600080fd5b81356001600160e01b031981168114610e7e57600080fd5b9392505050565b60008060408385031215610e9857600080fd5b50508035926020909101359150565b600060208284031215610eb957600080fd5b5035919050565b6001600160a01b0381168114610cba57600080fd5b600060208284031215610ee757600080fd5b8135610e7e81610ec0565b60008060408385031215610f0557600080fd5b823591506020830135610f1781610ec0565b809150509250929050565b600060208284031215610f3457600080fd5b8151610e7e81610ec0565b6020808252600c908201526b139bdd081e5bdd5c8813919560a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b818103818111156103c0576103c0610f65565b6020808252601290820152714e4654206973206e6f74206c656e64696e6760701b604082015260600190565b808201808211156103c0576103c0610f65565b600060208284031215610fdf57600080fd5b81518015158114610e7e57600080fd5b80820281158282048414176103c0576103c0610f65565b60008261102357634e487b7160e01b600052601260045260246000fd5b50049056fea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a264697066735822122099d8849e74b4d5fdde192adf3bc2f9c676ffbb28465a023e1550bf73486197b064736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/LendMumeNft.sol:LendMumeNftContract",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 501,
        "contract": "contracts/LendMumeNft.sol:LendMumeNftContract",
        "label": "contractDeployer",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 503,
        "contract": "contracts/LendMumeNft.sol:LendMumeNftContract",
        "label": "mumeNftContract",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 505,
        "contract": "contracts/LendMumeNft.sol:LendMumeNftContract",
        "label": "muTokenContract",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 509,
        "contract": "contracts/LendMumeNft.sol:LendMumeNftContract",
        "label": "nftOldOwner",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 513,
        "contract": "contracts/LendMumeNft.sol:LendMumeNftContract",
        "label": "lendStartAt",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 517,
        "contract": "contracts/LendMumeNft.sol:LendMumeNftContract",
        "label": "muToClaim",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 520,
        "contract": "contracts/LendMumeNft.sol:LendMumeNftContract",
        "label": "rewardMuPerDay",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/LendMumeNft.sol:LendMumeNftContract",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/LendMumeNft.sol:LendMumeNftContract",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
